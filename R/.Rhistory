diags <- diags[diags > 0 & diags < 9]
# Drop these diagonal columns from possible placements
possible_placements <- setdiff(possible_placements, diags)
library(tidyverse)
place_queen <- function(queens=c()) {
# If there are 8 queens placed, then this must be a solution.
if (length(queens) == 8) {
return(list(queens))
}
# Figre out where a queen can be placed in the next row.
# Drop all columns that have already been taken - since we
# can't place a queen below an existing queen
possible_placements <- setdiff(1:8, queens)
# For each queen already on the board, find the diagonal
# positions that it can see in this row.
diag_offsets <- seq.int(length(queens), 1)
diags <- c(queens + diag_offsets, queens - diag_offsets)
diags <- diags[diags > 0 & diags < 9]
# Drop these diagonal columns from possible placements
possible_placements <- setdiff(possible_placements, diags)
# For each possible placement, try and place a queen
possible_placements %>%
map(~place_queen(c(queens, .x))) %>%
keep(~length(.x) > 0) %>%
flatten()
}
#-----------------------------------------------------------------------------
#' Plot a single solution
#' @param queens a vector of 8 integers giving the column positions of 8 queens
#-----------------------------------------------------------------------------
plot_single_8queens <- function(queens) {
queens_df <- data_frame(cols = queens, rows=1:8)
board_df <- expand.grid(cols = 1:8, rows = 1:8) %>%
mutate(check = (cols + rows) %%2 == 1)
ggplot(queens_df, aes(cols, rows)) +
geom_tile(data=board_df, aes(fill=check), colour='black') +
geom_label(label='Q', fill='lightblue') +
theme_void() +
coord_equal() +
scale_fill_manual(values = c('TRUE'='white', 'FALSE'='black')) +
theme(
legend.position = 'none'
) +
labs(title = paste("Queens", deparse(as.numeric(queens))))
}
#-----------------------------------------------------------------------------
# Start with no queens placed and generate all solutions. Plot the first 2
#-----------------------------------------------------------------------------
solutions <- place_queen(2)
length(solutions)
plot_single_8queens(solutions[[9]])
# Tháp Hà Nội
THN <- function(n, A, B, C):
if (n == 1){
print("Di chuyển vòng 1 từ nguồn", A, "đến đích", B)
return(THN(n-1, A, C, B))}
print('x')
# Tháp Hà Nội
THN <- function(n, A, B, C):
if (n == 1){
print("Di chuyển vòng 1 từ nguồn", A, "đến đích", B)
return()}
# Tháp Hà Nội
THN <- function(n, A, B, C):
if(n == 1){
print("Di chuyển vòng 1 từ nguồn", A, "đến đích", B)
return()}
if (1<2){x=3}
x
if (1==2){x=4}
x
if (1=2){x=4}
# Tháp Hà Nội
THN <- function(n, A, B, C){
if(n == 1){
print("Di chuyển vòng 1 từ nguồn", A, "đến đích", B)
return()}
THN(n-1, A, B, C)
print("Di chuyển vòng", n, "từ nguồn", A, "đến đích", B)
THN(n-1, A, B, C)
}
n = int(input("Số tầng của tháp: "))
n = input("Số tầng của tháp: ")
n = 3
THN(n, "A", "B", "C")
a=THN(n, "A", "B", "C")
THN(n-1, A, B, C)
# Tháp Hà Nội
THN <- function(n, A, B, C){
if(n == 1){
print("Di chuyen vong 1 tu nguon", A, "den dich", B)
return()}
THN(n-1, A, B, C)
print("Di chuyen vong", n, "tu nguon", A, "den dich", B)
THN(n-1, A, B, C)
}
n = 3
a=THN(n, "A", "B", "C")
if (n==0) or (n==1){
return(1)
}
if (n==0) or (n==1){
return(1)
} else{
return(n*giaithua(n-1))
}
else{
return(n*giaithua(n-1))
}
else{
return(n*giaithua(n-1))
}
a=giaithua(4)
giaithua <- function(n){
if (n==0) or (n==1){
else{
return(n*giaithua(n-1))
}
a=giaithua(4)
View(THN)
if (n==0 || n==1){
giaithua <- function(n){
giaithua(4)
giaithua <- function(n){
if (n==0 || n==1){
return(1)}
else{
return(n*giaithua(n-1))
}
}
giaithua(4)
1
MMMM
1+2+3
x=a
a
x
giaithua(4)
giaithua(4)
if (n==0 || n==1){
return(1)}
else{
return(n*giaithua(n-1))
}
giaithua <- function(n){
if (n==0 || n==1){
return(1)}
else{
return(n*giaithua(n-1))
}
}
giaithua(4)
MAX  = function(x){
max = x[1]
for(i in  1:length(x)){
if(max < x[i]){
max = x[i]
}
}
return(max)
}
source('~/.active-rstudio-document')
MAX  = function(x){
max = x[1]
for(i in  1:length(x)){
if(max < x[i]){
max = x[i]
}
}
return(max)
}
MAX  = function(x){
max = x[1]
for(i in  1:length(x)){
if(max < x[i]){
max = x[i]
}
}
return(max)
}
MAX  = function(x){
max = x[1]
for(i in  1:length(x)){
if(max < x[i]){
max = x[i]
}
}
return(max)
}
MAX  = function(x){
max = x[1]
for(i in  1:length(x)){
if(max < x[i]){
max = x[i]
}
}
return(max)
}
MAX  = function(x){
max = x[1]
for(i in  1:length(x)){
if(max < x[i]){
max = x[i]
}
}
return(max)
}
MAX  = function(x){
max = x[1]
for(i in  1:length(x)){
if(max < x[i]){
max = x[i]
}
}
return(max)
}
MAX  = function(x){
max = x[1]
for(i in  1:length(x)){
if(max < x[i]){
max = x[i]
}
}
return(max)
}
giaithua <- function(n){
if (n==0 || n==1){
return(1)}
else{
return(n*giaithua(n-1))
}
}
giaithua(4)
4*3*2*1
giaithua(5)
n<-readline()
n<-as.integer(n)
giaithua(n)
n<-readline("Nhập n:")
giaithua <- function(){
n<-readline("Nhap n:")
n<-as.integer(n)
if (n==0 || n==1){
return(1)}
else{
return(n*giaithua(n-1))
}
}
giaithua(n)
giaithua()
return(n*giaithua(n-1))
giaithua <- function(n){
if (n==0 || n==1){
return(1)}
else{
return(n*giaithua(n-1))
}
}
n<-readline("Nhap n:")
n<-readline("Nhap n:")
n<-as.integer(n)
giaithua(n)
# Tháp Hà Nội
THN <- function(n, A, B, C){
if(n == 1){
print("Di chuyen vong 1 tu nguon", A, "den dich", B)
return()}
THN(n-1, A, B, C)
print("Di chuyen vong", n, "tu nguon", A, "den dich", B)
THN(n-1, A, B, C)
}
n = 3
a=THN(n, "A", "B", "C")
tower_of_hanoi <- function(n) {
tower <- list(1:n, NULL, NULL)
move.hanoi <- function(k, from, to, via) {
if (k > 1) {
move.hanoi(k - 1, from, via, to)
move.hanoi(1, from, to, via)
move.hanoi(k - 1, via, to, from)
}
else {
cat("Move ", tower[[from]][1], " from ", LETTERS[from],
" to ", LETTERS[to], "\n")
tower[[to]] <<- c(tower[[from]][1], tower[[to]])
tower[[from]] <<- tower[[from]][-1]
Sys.sleep(0.5)
}
}
move.hanoi(n, 1, 3, 2)
}
tower_of_hanoi(3)
# Tháp Hà Nội
THN <- function(n, A, B, C){
if(n == 1){
cat("Di chuyen vong 1 tu nguon", A, "den dich", B,'\n')
return()}
THN(n-1, A, B, C)
cat("Di chuyen vong", n, "tu nguon", A, "den dich", B,'\n')
THN(n-1, B, C, A)
}
n = 3
THN(n, "A", "B", "C")
n = 4
THN(n, "A", "B", "C")
tower_of_hanoi(4)
cat("Move disk 1 from", A, "to", B,'\n')
# Tháp Hà Nội
THN <- function(n, A, B, C){
if(n == 1){
cat("Move disk 1 from", A, "to", B,'\n')
return()}
THN(n-1, A, B, C)
cat("Move disk", n, "from", A, "to", B,'\n')
THN(n-1, B, C, A)
}
n = 4
THN(n, "A", "B", "C")
tower_of_hanoi(4)
ucln <- function(a,b){
if (b==0){
return(a)}
else (a==0){
return(b)}
return (ucln(b,a%b))
}
ucln <- function(a,b){
if (b==0){
return(a)}
else (a==0){
return(b)}
return (ucln(b,a %% b))
}
ucln <- function(a,b){
if (b==0){return(a)} else(a==0){return(b)}
return (ucln(b,a %% b))
}
ucln <- function(a,b){
if(b==0)return(a)
else(a==0)return(b)}
ucln <- function(a,b){
if(b==0) return(a)
else(a==0) return(b)
return (ucln(b,a %% b))
}
ucln <- function(a,b){
if(b==0) return(a)
else(a==0) return(b)
ucln(b,a %% b)
}
ucln <- function(a,b){
if(b==0) {return(a)}
else(a==0) {return(b)}
ucln(b,a %% b)
}
ucln <- function(a,b){
if(b==0){return(a)
else(a==0) return(b)}
ucln(b,a %% b)
}
ucln <- function(a,b){
if(b==0){
return(a)}
else(a==0){
return(b)}
ucln(b,a %% b)
}
ucln<-function(a,b){
if(b==0){
return(a)}
else(a==0){
return(b)}
ucln(b,a %% b)
}
# Tháp Hà Nội
THN <- function(n, A, B, C){
if(n == 1){
cat("Move disk 1 from", A, "to", B,'\n')
return()}
THN(n-1, A, B, C)
cat("Move disk", n, "from", A, "to", B,'\n')
THN(n-1, B, C, A)
}
n = 4
THN(n, "A", "B", "C")
ucln<-function(a,b){
if(b==0){
return(a)}
else if {
return(b)}
ucln(b,a %% b)
}
# Tháp Hà Nội
THN <- function(n, A, B, C){
if(n == 1){
cat("Move disk 1 from", A, "to", B,'\n')
return()}
THN(n-1, A, B, C)
cat("Move disk", n, "from", A, "to", B,'\n')
THN(n-1, B, C, A)
}
ucln<-function(a,b){
if(b==0){
return(a)}
else if (a==0) {
return(b)}
ucln(b,a %% b)
}
cat('UCLN của',a,'và',b,'là:',uscln(a,b))
ucln<-function(a,b){
if(b==0){
return(a)}
else if (a==0) {
return(b)}
ucln(b,a %% b)
}
a<-readline('Nhap a:')
b<-readline('Nhap b:')
cat('UCLN của',a,'và',b,'là:',ucln(a,b))
ucln<-function(a,b){
if(b==0){
return(a)}
else if (a==0) {
return(b)}
ucln(b,a%%b)
}
a<-readline('Nhap a:')
b<-readline('Nhap b:')
cat('UCLN của',a,'và',b,'là:',ucln(a,b))
cat('UCLN của',a,'và',b,'là:',ucln(a,b))
function(a,b){
if(b==0){
return(a)}
else if (a==0) {
return(b)}
ucln(b,a%%b)
}
ucln<-function(a,b){
if(b==0){
return(a)}
else if (a==0) {
return(b)}
ucln(b,a%%b)
}
a<-readline('Nhap a:')
b<-readline('Nhap b:')
cat('UCLN của',a,'và',b,'là:',ucln(a,b))
a<-readline('Nhap a:')
ucln<-function(a,b){
if(b==0){
return(a)}
else if (a==0) {
return(b)}
ucln(b,a%%b)
}
a<-readline('Nhap a:')
a<-as.integer(a)
b<-readline('Nhap b:')
b<-as.integer(b)
cat('UCLN của',a,'và',b,'là:',ucln(a,b))
# Vo Huong
help(graph)
library(igraph)
# Vo Huong
help(graph)
a = make_graph(c(1, 2, 2, 3, 3, 4, 5, 6, 4,1, 2,4, 4,5, 6,1), directed = FALSE)
plot(a)
source('C:/Users/ADMIN/Desktop/GiaiThuat-R/CTDLGT_R/BT12_CaiDatDoThiVoHuong.R')
library(igraph)
# Vo Huong
help(graph)
a = make_graph(c(1, 2, 2, 3, 3, 4, 5, 6, 4,1, 2,4, 4,5, 6,1), directed = TRUE)
plot(a)
a = make_graph(c(1, 2, 2, 3, 3, 4, 5, 6, 4,1, 2,4, 4,5, 6,1))
plot(a)
a = make_graph(c(1, 2, 2, 3, 3, 4, 5, 6, 4,1, 2,4, 4,5, 6,1), directed = TRUE)
plot(a)
library(data.tree)
install.packages("data.tree")
library(data.tree)
# thiet lap cay
acme <- Node$new("A")
accounting <- acme$AddChild("B")
software <- accounting$AddChild("C")
standards <- accounting$AddChild("D")
research <- acme$AddChild("E")
newProductLine <- research$AddChild("F")
newLabs <- research$AddChild("G")
it <- acme$AddChild("H")
outsource <- it$AddChild("I")
agile <- it$AddChild("J")
goToR <- it$AddChild("K")
print(acme)
# Duyet Cay sau
acme$Get('level', traversal = "post-order")
source('C:/Users/ADMIN/Desktop/GiaiThuat-R/CTDLGT_R/BT11_CaiDatCay_DuyetCayTheoThuTuSau.R')
library(data.tree)
# thiet lap cay
acme <- Node$new("A")
accounting <- acme$AddChild("B")
software <- accounting$AddChild("C")
standards <- accounting$AddChild("D")
research <- acme$AddChild("E")
newProductLine <- research$AddChild("F")
newLabs <- research$AddChild("G")
it <- acme$AddChild("H")
outsource <- it$AddChild("I")
agile <- it$AddChild("J")
goToR <- it$AddChild("K")
print(acme)
# Duyet cay Truoc
acme$Get('level')
